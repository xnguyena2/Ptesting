package com.example.heroku.model.repository;

import com.example.heroku.model.joinwith.ProductJoinWithProductUnit;
import org.springframework.data.r2dbc.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.data.repository.reactive.ReactiveCrudRepository;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public interface JoinProductWithProductUnitRepository extends ReactiveCrudRepository<ProductJoinWithProductUnit, Long> {
    @Query(value = "SELECT product.*, product_unit.id AS child_id, product_unit.group_id AS child_group_id, product_unit.createat AS child_createat, product_unit.product_unit_second_id AS child_product_unit_second_id, product_unit.product_second_id AS child_product_second_id, product_unit.name AS child_name, product_unit.sku AS child_sku, product_unit.upc AS child_upc, product_unit.price AS child_price, product_unit.promotional_price AS child_promotional_price, product_unit.inventory_number AS child_inventory_number, product_unit.wholesale_number AS child_wholesale_number, product_unit.wholesale_price AS child_wholesale_price, product_unit.buy_price AS child_buy_price, product_unit.discount AS child_discount, product_unit.date_expire AS child_date_expire, product_unit.volumetric AS child_volumetric, product_unit.weight AS child_weight, product_unit.visible AS child_visible, product_unit.enable_warehouse AS child_enable_warehouse, product_unit.group_unit_id AS child_group_unit_id, product_unit.group_unit_naname AS child_group_unit_naname, product_unit.group_unit_number AS child_group_unit_number, product_unit.product_type AS child_product_type, product_unit.services_config AS child_services_config, product_unit.arg_action_id AS child_arg_action_id, product_unit.arg_action_type AS child_arg_action_type, product_unit.status AS child_status, product_unit.imgid AS imgid, product_unit.tag AS tag, product_unit.thumbnail AS thumbnail, product_unit.medium AS medium, product_unit.large AS large, product_unit.category AS category, product_unit.img_id AS img_id, product_unit.img_group_id AS img_group_id, product_unit.img_createat AS img_createat FROM (SELECT * FROM product WHERE product.group_id = :group_id AND product.status IS DISTINCT FROM 'HIDE' ORDER BY createat DESC LIMIT :size OFFSET (:page * :size)) AS product LEFT JOIN ((SELECT * FROM product_unit WHERE product_unit.group_id = :group_id) AS p_u LEFT JOIN (SELECT image.imgid, image.tag, image.thumbnail, image.medium, image.large, image.category, image.id AS img_id, image.group_id AS img_group_id, image.createat AS img_createat FROM image WHERE image.group_id = :group_id) AS image ON p_u.product_unit_second_id = image.tag) AS product_unit ON product.product_second_id = product_unit.product_second_id")
    Flux<ProductJoinWithProductUnit> getIfProductNotHide(@Param("group_id")String groupID, @Param("page")int page, @Param("size")int size);

    @Query(value = "SELECT product.*, product_unit.id AS child_id, product_unit.group_id AS child_group_id, product_unit.createat AS child_createat, product_unit.product_unit_second_id AS child_product_unit_second_id, product_unit.product_second_id AS child_product_second_id, product_unit.name AS child_name, product_unit.sku AS child_sku, product_unit.upc AS child_upc, product_unit.price AS child_price, product_unit.promotional_price AS child_promotional_price, product_unit.inventory_number AS child_inventory_number, product_unit.wholesale_number AS child_wholesale_number, product_unit.wholesale_price AS child_wholesale_price, product_unit.buy_price AS child_buy_price, product_unit.discount AS child_discount, product_unit.date_expire AS child_date_expire, product_unit.volumetric AS child_volumetric, product_unit.weight AS child_weight, product_unit.visible AS child_visible, product_unit.enable_warehouse AS child_enable_warehouse, product_unit.group_unit_id AS child_group_unit_id, product_unit.group_unit_naname AS child_group_unit_naname, product_unit.group_unit_number AS child_group_unit_number, product_unit.product_type AS child_product_type, product_unit.services_config AS child_services_config, product_unit.arg_action_id AS child_arg_action_id, product_unit.arg_action_type AS child_arg_action_type, product_unit.status AS child_status, product_unit.imgid AS imgid, product_unit.tag AS tag, product_unit.thumbnail AS thumbnail, product_unit.medium AS medium, product_unit.large AS large, product_unit.category AS category, product_unit.img_id AS img_id, product_unit.img_group_id AS img_group_id, product_unit.img_createat AS img_createat FROM (SELECT * FROM product WHERE product.group_id = :group_id ORDER BY createat DESC LIMIT :size OFFSET (:page * :size)) AS product LEFT JOIN ((SELECT * FROM product_unit WHERE product_unit.group_id = :group_id) AS p_u LEFT JOIN (SELECT image.imgid, image.tag, image.thumbnail, image.medium, image.large, image.category, image.id AS img_id, image.group_id AS img_group_id, image.createat AS img_createat FROM image WHERE image.group_id = :group_id) AS image ON p_u.product_unit_second_id = image.tag) AS product_unit ON product.product_second_id = product_unit.product_second_id")
    Flux<ProductJoinWithProductUnit> getAllProduct(@Param("group_id")String groupID, @Param("page")int page, @Param("size")int size);

    @Query(value = "SELECT product.*, product_unit.id AS child_id, product_unit.group_id AS child_group_id, product_unit.createat AS child_createat, product_unit.product_unit_second_id AS child_product_unit_second_id, product_unit.product_second_id AS child_product_second_id, product_unit.name AS child_name, product_unit.sku AS child_sku, product_unit.upc AS child_upc, product_unit.price AS child_price, product_unit.promotional_price AS child_promotional_price, product_unit.inventory_number AS child_inventory_number, product_unit.wholesale_number AS child_wholesale_number, product_unit.wholesale_price AS child_wholesale_price, product_unit.buy_price AS child_buy_price, product_unit.discount AS child_discount, product_unit.date_expire AS child_date_expire, product_unit.volumetric AS child_volumetric, product_unit.weight AS child_weight, product_unit.visible AS child_visible, product_unit.enable_warehouse AS child_enable_warehouse, product_unit.group_unit_id AS child_group_unit_id, product_unit.group_unit_naname AS child_group_unit_naname, product_unit.group_unit_number AS child_group_unit_number, product_unit.product_type AS child_product_type, product_unit.services_config AS child_services_config, product_unit.arg_action_id AS child_arg_action_id, product_unit.arg_action_type AS child_arg_action_type, product_unit.status AS child_status, product_unit.imgid AS imgid, product_unit.tag AS tag, product_unit.thumbnail AS thumbnail, product_unit.medium AS medium, product_unit.large AS large, product_unit.category AS category, product_unit.img_id AS img_id, product_unit.img_group_id AS img_group_id, product_unit.img_createat AS img_createat FROM (SELECT * FROM product WHERE product.group_id = :group_id AND product.status IS DISTINCT FROM 'HIDE' AND visible_web ORDER BY createat DESC LIMIT :size OFFSET (:page * :size)) AS product LEFT JOIN ((SELECT * FROM product_unit WHERE product_unit.group_id = :group_id) AS p_u LEFT JOIN (SELECT image.imgid, image.tag, image.thumbnail, image.medium, image.large, image.category, image.id AS img_id, image.group_id AS img_group_id, image.createat AS img_createat FROM image WHERE image.group_id = :group_id) AS image ON p_u.product_unit_second_id = image.tag) AS product_unit ON product.product_second_id = product_unit.product_second_id")
    Flux<ProductJoinWithProductUnit> getIfProductNotHideAndForWeb(@Param("group_id")String groupID, @Param("page")int page, @Param("size")int size);

    @Query(value = "SELECT product.*, product_unit.id AS child_id, product_unit.group_id AS child_group_id, product_unit.createat AS child_createat, product_unit.product_unit_second_id AS child_product_unit_second_id, product_unit.product_second_id AS child_product_second_id, product_unit.name AS child_name, product_unit.sku AS child_sku, product_unit.upc AS child_upc, product_unit.price AS child_price, product_unit.promotional_price AS child_promotional_price, product_unit.inventory_number AS child_inventory_number, product_unit.wholesale_number AS child_wholesale_number, product_unit.wholesale_price AS child_wholesale_price, product_unit.buy_price AS child_buy_price, product_unit.discount AS child_discount, product_unit.date_expire AS child_date_expire, product_unit.volumetric AS child_volumetric, product_unit.weight AS child_weight, product_unit.visible AS child_visible, product_unit.enable_warehouse AS child_enable_warehouse, product_unit.group_unit_id AS child_group_unit_id, product_unit.group_unit_naname AS child_group_unit_naname, product_unit.group_unit_number AS child_group_unit_number, product_unit.product_type AS child_product_type, product_unit.services_config AS child_services_config, product_unit.arg_action_id AS child_arg_action_id, product_unit.arg_action_type AS child_arg_action_type, product_unit.status AS child_status, product_unit.imgid AS imgid, product_unit.tag AS tag, product_unit.thumbnail AS thumbnail, product_unit.medium AS medium, product_unit.large AS large, product_unit.category AS category, product_unit.img_id AS img_id, product_unit.img_group_id AS img_group_id, product_unit.img_createat AS img_createat FROM (SELECT * FROM product WHERE product.group_id = :group_id AND product.product_second_id = :product_second_id) AS product LEFT JOIN ((SELECT * FROM product_unit WHERE product_unit.group_id = :group_id AND product_unit.product_unit_second_id = :product_unit_second_id) AS p_u LEFT JOIN (SELECT image.imgid, image.tag, image.thumbnail, image.medium, image.large, image.category, image.id AS img_id, image.group_id AS img_group_id, image.createat AS img_createat FROM image WHERE image.group_id = :group_id) AS image ON p_u.product_unit_second_id = image.tag) AS product_unit ON product.product_second_id = product_unit.product_second_id")
    Mono<ProductJoinWithProductUnit> getProductAndOnly1Unit(@Param("group_id")String groupID, @Param("product_second_id")String product_second_id, @Param("product_unit_second_id")String product_unit_second_id);

    @Query(value = "SELECT product.*, product_unit.id AS child_id, product_unit.group_id AS child_group_id, product_unit.createat AS child_createat, product_unit.product_unit_second_id AS child_product_unit_second_id, product_unit.product_second_id AS child_product_second_id, product_unit.name AS child_name, product_unit.sku AS child_sku, product_unit.upc AS child_upc, product_unit.price AS child_price, product_unit.promotional_price AS child_promotional_price, product_unit.inventory_number AS child_inventory_number, product_unit.wholesale_number AS child_wholesale_number, product_unit.wholesale_price AS child_wholesale_price, product_unit.buy_price AS child_buy_price, product_unit.discount AS child_discount, product_unit.date_expire AS child_date_expire, product_unit.volumetric AS child_volumetric, product_unit.weight AS child_weight, product_unit.visible AS child_visible, product_unit.enable_warehouse AS child_enable_warehouse, product_unit.group_unit_id AS child_group_unit_id, product_unit.group_unit_naname AS child_group_unit_naname, product_unit.group_unit_number AS child_group_unit_number, product_unit.product_type AS child_product_type, product_unit.services_config AS child_services_config, product_unit.arg_action_id AS child_arg_action_id, product_unit.arg_action_type AS child_arg_action_type, product_unit.status AS child_status, product_unit.imgid AS imgid, product_unit.tag AS tag, product_unit.thumbnail AS thumbnail, product_unit.medium AS medium, product_unit.large AS large, product_unit.category AS category, product_unit.img_id AS img_id, product_unit.img_group_id AS img_group_id, product_unit.img_createat AS img_createat FROM (SELECT * FROM product WHERE product.group_id = :group_id AND product.product_second_id = :product_second_id) AS product LEFT JOIN ((SELECT * FROM product_unit WHERE product_unit.group_id = :group_id AND product_unit.product_second_id = :product_second_id) AS p_u LEFT JOIN (SELECT image.imgid, image.tag, image.thumbnail, image.medium, image.large, image.category, image.id AS img_id, image.group_id AS img_group_id, image.createat AS img_createat FROM image WHERE image.group_id = :group_id) AS image ON p_u.product_unit_second_id = image.tag) AS product_unit ON product.product_second_id = product_unit.product_second_id")
    Flux<ProductJoinWithProductUnit> getProductAndAllUnit(@Param("group_id")String groupID, @Param("product_second_id")String product_second_id);
}
